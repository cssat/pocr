}
# keep the columns that have more than one value
# and the columns the user specified in the select argument
# But don't keep duplicate columns
df <- df[, unique(c(uniques, select))]
if (date) {
to.change <- which(sapply(df, is.POSIXct))
for (i in to.change) {
df[, i] <- as.Date(df[, i])
}
}
return(df)
}
head(b)
head(cr_clean(b))
#' Clean up colnames from Portal, allow option to
#' select columns and to convert to \code{Date} class.
#' @param df data.frame frame stored procedure
#' @param select optional character vector of columns to keep
#' @param date boolean indicating whether any \code{datetime} columns
#' should be coverted to \code{Date} classes (default is \code{T}).
#' @export
cr_clean <- function(df, select = NULL, date = T,
date.type = 1, qry.type = "all.unique") {
names(df) <- str_replace_all(names(df), pattern="&", replacement = "and")
names(df) <- make.names(names(df), allow_ = F)
names(df) <- tolower(names(df))
names(df) <- str_replace_all(names(df), pattern=" |/|\\(|\\)", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="/", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="\\(", replacement = "")
names(df) <- str_replace_all(names(df), pattern="\\)", replacement = "")
qry.row.keep <- rep(TRUE, nrow(df))
if (any(str_detect(names(df), "qry\\.type"))){
qry.type.col <- names(df)[str_detect(names(df), "qry\\.type")]
if (qry.type == "all.unique") {
if (any(df[, qry.type.col]) == 2) {
qry.row.keep <- df[, qry.type.col] == 2
} else {
qry.row.keep <- df[, qry.type.col] == 0
if (all(!qry.row.keep)) warning("No 'all' or 'unique' query type found.")
}
} else {
qry.row.keep <- df[, qry.type.col] == qry.type
}
}
date.row.keep <- rep(TRUE, nrow(df)) ## finish this # if there are 1's keep them, otherwise keep 2's
if ("date.type" %in% names(df)) {
date.type.col <- names(df)[str_detect(names(df), "date\\.type")]
if (any(df[, date.type.col] == 1)) print(1)
}
df <- df[qry.row.keep & date.row.keep, ]
# find columns that have more than one unique values
uniques <- sapply(df, function(x) length(unique(x)))
uniques <- names(uniques)[uniques > 1]
browser()
if (! is.null(select)) {
select <- make.names(select, allow_ = F)
}
# keep the columns that have more than one value
# and the columns the user specified in the select argument
# But don't keep duplicate columns
df <- df[, unique(c(uniques, select))]
if (date) {
to.change <- which(sapply(df, is.POSIXct))
for (i in to.change) {
df[, i] <- as.Date(df[, i])
}
}
return(df)
}
head(cr_clean(b))
uniques
head(b)
names(b)
names(df)
str_detect(names(df), "qry\\.type")
any(str_detect(names(df), "qry\\.type"))
names(df)[(str_detect(names(df), "qry\\.type"))]
qry.type.col
df[, qry.type.col]
qry.type.col
names(df)
df[qry.type.col]
x <- "finding"
x
df[, x]
nrow(df)
cr_clean <- function(df, select = NULL, date = T,
date.type = 1, qry.type = "all.unique") {
names(df) <- str_replace_all(names(df), pattern="&", replacement = "and")
names(df) <- make.names(names(df), allow_ = F)
names(df) <- tolower(names(df))
names(df) <- str_replace_all(names(df), pattern=" |/|\\(|\\)", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="/", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="\\(", replacement = "")
names(df) <- str_replace_all(names(df), pattern="\\)", replacement = "")
qry.row.keep <- rep(TRUE, nrow(df))
browser()
if (any(str_detect(names(df), "qry\\.type"))) {
qry.type.col <- names(df)[str_detect(names(df), "qry\\.type")]
if (qry.type == "all.unique") {
if (any(df[, qry.type.col]) == 2) {
qry.row.keep <- df[, qry.type.col] == 2
} else {
qry.row.keep <- df[, qry.type.col] == 0
if (all(!qry.row.keep)) warning("No 'all' or 'unique' query type found.")
}
} else {
qry.row.keep <- df[, qry.type.col] == qry.type
}
}
date.row.keep <- rep(TRUE, nrow(df)) ## finish this # if there are 1's keep them, otherwise keep 2's
if ("date.type" %in% names(df)) {
date.type.col <- names(df)[str_detect(names(df), "date\\.type")]
if (any(df[, date.type.col] == 1)) print(1)
}
df <- df[qry.row.keep & date.row.keep, ]
# find columns that have more than one unique values
uniques <- sapply(df, function(x) length(unique(x)))
uniques <- names(uniques)[uniques > 1]
browser()
if (! is.null(select)) {
select <- make.names(select, allow_ = F)
}
# keep the columns that have more than one value
# and the columns the user specified in the select argument
# But don't keep duplicate columns
df <- df[, unique(c(uniques, select))]
if (date) {
to.change <- which(sapply(df, is.POSIXct))
for (i in to.change) {
df[, i] <- as.Date(df[, i])
}
}
return(df)
}
head(cr_clean(b))
dim(df)
qry.type
summary(df[, 1])
qry.type.col
df[, qry.type.col]
cr_clean <- function(df, select = NULL, date = T,
date.type = 1, qry.type = "all.unique") {
names(df) <- str_replace_all(names(df), pattern="&", replacement = "and")
names(df) <- make.names(names(df), allow_ = F)
names(df) <- tolower(names(df))
names(df) <- str_replace_all(names(df), pattern=" |/|\\(|\\)", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="/", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="\\(", replacement = "")
names(df) <- str_replace_all(names(df), pattern="\\)", replacement = "")
qry.row.keep <- rep(TRUE, nrow(df))
#browser()
if (any(str_detect(names(df), "qry\\.type"))) {
qry.type.col <- names(df)[str_detect(names(df), "qry\\.type")]
if (qry.type == "all.unique") {
if (any(df[, qry.type.col] == 2)) {
qry.row.keep <- df[, qry.type.col] == 2
} else {
qry.row.keep <- df[, qry.type.col] == 0
if (all(!qry.row.keep)) warning("No 'all' or 'unique' query type found.")
}
} else {
qry.row.keep <- df[, qry.type.col] == qry.type
}
}
date.row.keep <- rep(TRUE, nrow(df)) ## finish this # if there are 1's keep them, otherwise keep 2's
if ("date.type" %in% names(df)) {
date.type.col <- names(df)[str_detect(names(df), "date\\.type")]
if (any(df[, date.type.col] == 1)) print(1)
}
df <- df[qry.row.keep & date.row.keep, ]
# find columns that have more than one unique values
uniques <- sapply(df, function(x) length(unique(x)))
uniques <- names(uniques)[uniques > 1]
browser()
if (! is.null(select)) {
select <- make.names(select, allow_ = F)
}
# keep the columns that have more than one value
# and the columns the user specified in the select argument
# But don't keep duplicate columns
df <- df[, unique(c(uniques, select))]
if (date) {
to.change <- which(sapply(df, is.POSIXct))
for (i in to.change) {
df[, i] <- as.Date(df[, i])
}
}
return(df)
}
head(cr_clean(b))
dim(df)
cr_clean <- function(df, select = NULL, date = T,
date.type = 1, qry.type = "all.unique") {
names(df) <- str_replace_all(names(df), pattern="&", replacement = "and")
names(df) <- make.names(names(df), allow_ = F)
names(df) <- tolower(names(df))
names(df) <- str_replace_all(names(df), pattern=" |/|\\(|\\)", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="/", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="\\(", replacement = "")
names(df) <- str_replace_all(names(df), pattern="\\)", replacement = "")
qry.row.keep <- rep(TRUE, nrow(df))
#browser()
if (any(str_detect(names(df), "qry\\.type"))) {
qry.type.col <- names(df)[str_detect(names(df), "qry\\.type")]
if (qry.type == "all.unique") {
if (any(df[, qry.type.col] == 2)) {
qry.row.keep <- df[, qry.type.col] == 2
} else {
qry.row.keep <- df[, qry.type.col] == 0
if (all(!qry.row.keep)) warning("No 'all' or 'unique' query type found.")
}
} else {
qry.row.keep <- df[, qry.type.col] == qry.type
}
}
date.row.keep <- rep(TRUE, nrow(df)) ## finish this # if there are 1's keep them, otherwise keep 2's
if ("date.type" %in% names(df)) {
date.type.col <- names(df)[str_detect(names(df), "date\\.type")]
if (any(df[, date.type.col] == 1)) {
date.type.col <- df[, date.type.col] == 1
} else {
date.type.col <- df[, date.type.col] == 2
}
}
df <- df[qry.row.keep & date.row.keep, ]
# find columns that have more than one unique values
uniques <- sapply(df, function(x) length(unique(x)))
uniques <- names(uniques)[uniques > 1]
browser()
if (! is.null(select)) {
select <- make.names(select, allow_ = F)
}
# keep the columns that have more than one value
# and the columns the user specified in the select argument
# But don't keep duplicate columns
df <- df[, unique(c(uniques, select))]
if (date) {
to.change <- which(sapply(df, is.POSIXct))
for (i in to.change) {
df[, i] <- as.Date(df[, i])
}
}
return(df)
}
head(cr_clean(b))
cr_clean <- function(df, select = NULL, date = T,
date.type = 1, qry.type = "all.unique") {
names(df) <- str_replace_all(names(df), pattern="&", replacement = "and")
names(df) <- make.names(names(df), allow_ = F)
names(df) <- tolower(names(df))
names(df) <- str_replace_all(names(df), pattern=" |/|\\(|\\)", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="/", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="\\(", replacement = "")
names(df) <- str_replace_all(names(df), pattern="\\)", replacement = "")
qry.row.keep <- rep(TRUE, nrow(df))
#browser()
if (any(str_detect(names(df), "qry\\.type"))) {
qry.type.col <- names(df)[str_detect(names(df), "qry\\.type")]
if (qry.type == "all.unique") {
if (any(df[, qry.type.col] == 2)) {
qry.row.keep <- df[, qry.type.col] == 2
} else {
qry.row.keep <- df[, qry.type.col] == 0
if (all(!qry.row.keep)) warning("No 'all' or 'unique' query type found.")
}
} else {
qry.row.keep <- df[, qry.type.col] == qry.type
}
}
date.row.keep <- rep(TRUE, nrow(df)) ## finish this # if there are 1's keep them, otherwise keep 2's
if ("date.type" %in% names(df)) {
date.type.col <- names(df)[str_detect(names(df), "date\\.type")]
if (any(df[, date.type.col] == 1)) {
date.type.col <- df[, date.type.col] == 1
} else {
date.type.col <- df[, date.type.col] == 2
}
}
df <- df[qry.row.keep & date.row.keep, ]
# find columns that have more than one unique values
uniques <- sapply(df, function(x) length(unique(x)))
uniques <- names(uniques)[uniques > 1]
browser()
if (! is.null(select)) {
select <- make.names(select, allow_ = F)
}
# keep the columns that have more than one value
# and the columns the user specified in the select argument
# But don't keep duplicate columns
df <- df[, unique(c(uniques, select))]
if (date) {
to.change <- which(sapply(df, is.POSIXct))
for (i in to.change) {
df[, i] <- as.Date(df[, i])
}
}
return(df)
}
head(cr_clean(b))
select
df
df[,1]
b[,1]
b[1,]
date.row.keep <- rep(TRUE, nrow(b)) ## finish this # if there are 1's keep them, otherwise keep 2's
if ("date.type" %in% names(b)) {
date.type.col <- names(b)[str_detect(names(b), "date\\.type")]
if (any(df[, date.type.col] == 1)) {
date.type.col <- b[, date.type.col] == 1
} else {
date.type.col <- b[, date.type.col] == 2
}
print(b)
}
date.type.col <- names(b)[str_detect(names(b), "date\\.type")]
date.type.col
date.type.col
(any(df[, date.type.col] == 1))
cr_clean <- function(df, select = NULL, date = T,
date.type = 1, qry.type = "all.unique") {
names(df) <- str_replace_all(names(df), pattern="&", replacement = "and")
names(df) <- make.names(names(df), allow_ = F)
names(df) <- tolower(names(df))
names(df) <- str_replace_all(names(df), pattern=" |/|\\(|\\)", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="/", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="\\(", replacement = "")
names(df) <- str_replace_all(names(df), pattern="\\)", replacement = "")
qry.row.keep <- rep(TRUE, nrow(df))
#browser()
if (any(str_detect(names(df), "qry\\.type"))) {
qry.type.col <- names(df)[str_detect(names(df), "qry\\.type")]
if (qry.type == "all.unique") {
if (any(df[, qry.type.col] == 2)) {
qry.row.keep <- df[, qry.type.col] == 2
} else {
qry.row.keep <- df[, qry.type.col] == 0
if (all(!qry.row.keep)) warning("No 'all' or 'unique' query type found.")
}
} else {
qry.row.keep <- df[, qry.type.col] == qry.type
}
}
#date.row.keep <- rep(TRUE, nrow(df)) ## finish this # if there are 1's keep them, otherwise keep 2's
#if ("date.type" %in% names(df)) {
#    date.type.col <- names(df)[str_detect(names(df), "date\\.type")]
#    if (any(df[, date.type.col] == 1)) {
#        date.type.col <- df[, date.type.col] == 1
#    } else {
#        date.type.col <- df[, date.type.col] == 2
#    }
#}
df <- df[qry.row.keep & date.row.keep, ]
# find columns that have more than one unique values
uniques <- sapply(df, function(x) length(unique(x)))
uniques <- names(uniques)[uniques > 1]
browser()
if (! is.null(select)) {
select <- make.names(select, allow_ = F)
}
# keep the columns that have more than one value
# and the columns the user specified in the select argument
# But don't keep duplicate columns
df <- df[, unique(c(uniques, select))]
if (date) {
to.change <- which(sapply(df, is.POSIXct))
for (i in to.change) {
df[, i] <- as.Date(df[, i])
}
}
return(df)
}
head(cr_clean(b))
select
df
head(df)
head(df)
cr_clean <- function(df, select = NULL, date = T,
date.type = 1, qry.type = "all.unique") {
names(df) <- str_replace_all(names(df), pattern="&", replacement = "and")
names(df) <- make.names(names(df), allow_ = F)
names(df) <- tolower(names(df))
names(df) <- str_replace_all(names(df), pattern=" |/|\\(|\\)", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="/", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="\\(", replacement = "")
names(df) <- str_replace_all(names(df), pattern="\\)", replacement = "")
qry.row.keep <- rep(TRUE, nrow(df))
#browser()
if (any(str_detect(names(df), "qry\\.type"))) {
qry.type.col <- names(df)[str_detect(names(df), "qry\\.type")]
if (qry.type == "all.unique") {
if (any(df[, qry.type.col] == 2)) {
qry.row.keep <- df[, qry.type.col] == 2
} else {
qry.row.keep <- df[, qry.type.col] == 0
if (all(!qry.row.keep)) warning("No 'all' or 'unique' query type found.")
}
} else {
qry.row.keep <- df[, qry.type.col] == qry.type
}
}
#date.row.keep <- rep(TRUE, nrow(df)) ## finish this # if there are 1's keep them, otherwise keep 2's
if ("date.type" %in% names(df)) {
date.type.col <- names(df)[str_detect(names(df), "date\\.type")]
if (any(df[, date.type.col] == 1)) {
date.type.col <- df[, date.type.col] == 1
} else {
date.type.col <- df[, date.type.col] == 2
}
}
df <- df[qry.row.keep & date.row.keep, ]
# find columns that have more than one unique values
uniques <- sapply(df, function(x) length(unique(x)))
uniques <- names(uniques)[uniques > 1]
if (! is.null(select)) {
select <- make.names(select, allow_ = F)
}
# keep the columns that have more than one value
# and the columns the user specified in the select argument
# But don't keep duplicate columns
df <- df[, unique(c(uniques, select))]
if (date) {
to.change <- which(sapply(df, is.POSIXct))
for (i in to.change) {
df[, i] <- as.Date(df[, i])
}
}
return(df)
}
head(cr_clean(b))
cr_clean <- function(df, select = NULL, date = T,
date.type = 1, qry.type = "all.unique") {
names(df) <- str_replace_all(names(df), pattern="&", replacement = "and")
names(df) <- make.names(names(df), allow_ = F)
names(df) <- tolower(names(df))
names(df) <- str_replace_all(names(df), pattern=" |/|\\(|\\)", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="/", replacement = ".")
names(df) <- str_replace_all(names(df), pattern="\\(", replacement = "")
names(df) <- str_replace_all(names(df), pattern="\\)", replacement = "")
qry.row.keep <- rep(TRUE, nrow(df))
#browser()
if (any(str_detect(names(df), "qry\\.type"))) {
qry.type.col <- names(df)[str_detect(names(df), "qry\\.type")]
if (qry.type == "all.unique") {
if (any(df[, qry.type.col] == 2)) {
qry.row.keep <- df[, qry.type.col] == 2
} else {
qry.row.keep <- df[, qry.type.col] == 0
if (all(!qry.row.keep)) warning("No 'all' or 'unique' query type found.")
}
} else {
qry.row.keep <- df[, qry.type.col] == qry.type
}
}
#date.row.keep <- rep(TRUE, nrow(df)) ## finish this # if there are 1's keep them, otherwise keep 2's
if ("date.type" %in% names(df)) {
date.type.col <- names(df)[str_detect(names(df), "date\\.type")]
if (any(df[, date.type.col] == 1)) {
date.type.col <- df[, date.type.col] == 1
} else {
date.type.col <- df[, date.type.col] == 2
}
}
df <- df[qry.row.keep & date.row.keep, ]
# find columns that have more than one unique values
uniques <- sapply(df, function(x) length(unique(x)))
uniques <- names(uniques)[uniques > 1]
if (! is.null(select)) {
select <- make.names(select, allow_ = F)
}
# keep the columns that have more than one value
# and the columns the user specified in the select argument
# But don't keep duplicate columns
df <- df[, unique(c(uniques, select))]
if (date) {
to.change <- which(sapply(df, is.POSIXct))
for (i in to.change) {
df[, i] <- as.Date(df[, i])
}
}
return(df)
}
head(cr_clean(b))
b
sp_cr(county = 'King')
b <- sp_cr(county = 'King')
b
"population_person")
c("ia_trends_counts", "ia_trends_rates", "ia_safety",
"ihs_trends_counts", "ihs_trends_rates", "ihs_safety",
"ooh_pit_counts", "ooh_pit_rates", "ooh_flow_entries_counts",
"ooh_flow_entries_rates", "ooh_flow_exits", "ooh_reentry",
"ooh_outcomes", "ooh_outcomes_12m", "ooh_outcomes_24m",
"ooh_outcomes_3m", "ooh_wb_familysettings", "ooh_wb_siblings",
"ooh_wb_siblings_pvt", "ooh_wb_siblings_uncensored", "population_household",
"population_person")
sp_names <- c("ia_trends_counts", "ia_trends_rates", "ia_safety",
"ihs_trends_counts", "ihs_trends_rates", "ihs_safety",
"ooh_pit_counts", "ooh_pit_rates", "ooh_flow_entries_counts",
"ooh_flow_entries_rates", "ooh_flow_exits", "ooh_reentry",
"ooh_outcomes", "ooh_outcomes_12m", "ooh_outcomes_24m",
"ooh_outcomes_3m", "ooh_wb_familysettings", "ooh_wb_siblings",
"ooh_wb_siblings_pvt", "ooh_wb_siblings_uncensored", "population_household",
"population_person")
sp_names
load("S:/Data Portal/poc_r_package/pocr/data/colors.rda")
sp_names
setwd("C:/Users/oieeri26/Desktop/GitHub/pocr/data")
save(sp_names, file = "sp_names.Rdata")
setwd("C:/Users/oieeri26/Desktop/GitHub/pocr/data")
save(sp_names, file = "sp_names.rda")
